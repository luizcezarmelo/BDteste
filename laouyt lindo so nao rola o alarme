<!DOCTYPE html>
<html lang="pt-br">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Agenda do Fofo</title>
<style>
  * { box-sizing: border-box; }
  :root{
    --b: #0f172a; --fg:#0b1324; --muted:#6b7280; --bd:#e5e7eb;
    --pri:#2563eb; --pri-2:#1e40af; --ok:#16a34a; --warn:#ea580c; --bg:#ffffff;
  }
  body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,'Helvetica Neue','Noto Sans',Arial,sans-serif;background:var(--bg);color:var(--fg)}
  .container{display:flex;flex-direction:column}
  @media(min-width:900px){.container{flex-direction:row;min-height:100vh}}
  .left-panel,.right-panel{padding:20px}
  .left-panel{flex:2;border-right:1px solid var(--bd)}
  .right-panel{flex:1}
  h1{margin:0 0 10px 0}
  .calendar-section{margin:12px 0;display:flex;gap:8px;flex-wrap:wrap;align-items:center}
  .day-nav{display:flex;gap:8px;align-items:center;margin:0 0 12px 0}
  button{cursor:pointer;border:1px solid var(--bd);background:#f8fafc;border-radius:8px;padding:8px 12px}
  button:hover{background:#eef2ff}
  .actions{display:flex;gap:10px;margin:10px 0;flex-wrap:wrap}
  .search-area{display:flex;gap:6px;align-items:center;margin:8px 0;flex-wrap:wrap}
  .search-area input{flex:1;min-width:160px;padding:8px;border:1px solid var(--bd);border-radius:6px}
  .search-results{border:1px solid var(--bd);border-radius:8px;max-height:220px;overflow:auto}
  .search-results div{padding:8px 10px;border-bottom:1px solid var(--bd);cursor:pointer}
  .search-results div:last-child{border-bottom:none}
  .search-results div:hover{background:#f1f5f9}
  .commitment{display:grid;grid-template-columns:92px 1fr auto auto;gap:6px;align-items:center;padding:8px;border:1px solid var(--bd);border-radius:10px;margin-bottom:8px}
  .commitment input[type="time"]{padding:6px;border:1px solid var(--bd);border-radius:6px;width:100%}
  .commitment input[type="text"]{padding:8px;border:1px solid var(--bd);border-radius:6px;width:100%}
  .commitment .ok{border-color:#c7f0cf;background:#ecfdf5}
  .commitment .del{border-color:#ffd7d7;background:#fff1f2}
  .done{text-decoration:line-through;color:#6b7280}
  .checked{background:#e7f0ff}
  .destaque{outline:3px solid #fde68a;background:#fffbeb}
  .muted{color:var(--muted);font-size:.9rem}
  .row{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
  .tag{display:inline-flex;align-items:center;gap:6px;background:#eef2ff;border:1px solid var(--bd);border-radius:999px;padding:6px 10px;font-size:.85rem}
  .pill{background:#ecfeff;border:1px solid #bae6fd;border-radius:999px;padding:2px 8px;font-size:.75rem}
  .panel{border:1px solid var(--bd);border-radius:12px;padding:12px}
  #login-screen{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:#f3f4f6;z-index:1000}
  #login-card{background:#fff;border:1px solid var(--bd);border-radius:16px;padding:22px;box-shadow:0 10px 30px rgba(0,0,0,.08);min-width:320px;max-width:92vw}
  #login-card h2{margin:0 0 10px 0}
  #login-card input{width:100%;padding:10px;border:1px solid var(--bd);border-radius:8px}
  #login-card .msg{min-height:18px;font-size:.9rem}
  #toggle-pass{position:absolute;right:10px;top:50%;transform:translateY(-50%);background:transparent;border:none;font-size:1rem;cursor:pointer}
  .relogio{font-variant-numeric:tabular-nums}
</style>
</head>
<body>
<div id="login-screen">
  <div id="login-card">
    <h2 id="login-title">Acesso Restrito</h2>
    <p class="muted" id="login-sub">Entre com a senha para continuar.</p>
    <div style="position:relative;margin:8px 0 6px 0">
      <input type="password" id="password-input" placeholder="Digite a senha" />
      <button id="toggle-pass" title="Mostrar/ocultar">👁️</button>
    </div>
    <div class="row">
      <button id="login-btn">Entrar</button>
      <button id="define-btn" style="display:none">Definir senha</button>
    </div>
    <div class="msg" id="login-error" style="color:#dc2626;"></div>
    <div class="muted" style="margin-top:8px">Dica: Enter confirma.</div>
  </div>
</div>

<div class="container" id="app" style="display:none">
  <div class="left-panel">
    <div class="row" style="justify-content:space-between">
      <h1>Agenda do Fofo</h1>
      <span class="pill relogio" id="clock">--:--</span>
    </div>
    <div class="calendar-section">
      <input type="date" id="dataSelecionada" />
      <button id="hojeBtn" title="Hoje">📅 Hoje</button>
      <span class="tag">Auto-salvo <span id="autosaveState">a cada 5s</span></span>
    </div>
    <div class="day-nav">
      <button id="prevDayBtn">◀ Anterior</button>
      <button id="nextDayBtn">Próximo ▶</button>
    </div>
    <div class="actions">
      <button id="novoBtn">Novo compromisso</button>
      <button id="exportarBtn">Exportar TXT</button>
    </div>
    <div id="agenda"></div>
  </div>
  <div class="right-panel">
    <div class="panel" style="margin-bottom:12px">
      <h2 style="margin:0 0 8px 0">Validador de CPF</h2>
      <div class="row">
        <input type="text" id="cpf" placeholder="Digite o CPF" />
        <button id="cpfClear">❌</button>
        <button id="cpfCopy">Copiar</button>
      </div>
      <p id="cpfStatus" class="muted"></p>
    </div>
    <div class="panel" style="margin-bottom:12px">
      <h3 style="margin:0 0 8px 0">🔍 Pesquisa global</h3>
      <div class="search-area">
        <input type="text" id="search" placeholder="Pesquisar (min 3 letras)..." />
        <button id="limparBuscaBtn">Limpar</button>
      </div>
      <div id="searchResults" class="search-results"></div>
    </div>
    <div class="panel">
      <h3 style="margin:0 0 8px 0">📝 Lembretes Fixos</h3>
      <textarea id="notasFixas" rows="12" style="width:100%;padding:8px;border:1px solid var(--bd);border-radius:8px;"></textarea>
    </div>
  </div>
</div>

<script type="module">
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js";
import { getDatabase, ref, child, get, set, onValue } from "https://www.gstatic.com/firebasejs/10.12.5/firebase-database.js";

const firebaseConfig = {
  apiKey: "AIzaSyBiikcagIm1p7wJG6DsHijkvdy1fpDBn8Y",
  authDomain: "bd-teste-c931c.firebaseapp.com",
  databaseURL: "https://bd-teste-c931c-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "bd-teste-c931c",
  storageBucket: "bd-teste-c931c.firebasestorage.app",
  messagingSenderId: "270308100761",
  appId: "1:270308100761:web:ae34fde6d5ae86b67b0608"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

// -----------------------------------------------------------
// ----------------- Lógica de Senha (Nova) ------------------
// -----------------------------------------------------------
const PASSWORD_NODE = 'appPassword';
const els = {
  loginScreen: document.getElementById('login-screen'),
  loginTitle:  document.getElementById('login-title'),
  loginSub:    document.getElementById('login-sub'),
  passInput:   document.getElementById('password-input'),
  togglePass:  document.getElementById('toggle-pass'),
  loginBtn:    document.getElementById('login-btn'),
  defineBtn:   document.getElementById('define-btn'),
  loginErr:    document.getElementById('login-error'),
  app:         document.getElementById('app'),
};

let currentPassword = null;

async function loadPassword() {
  const snap = await get(child(ref(db), PASSWORD_NODE));
  currentPassword = snap.exists() ? snap.val() : null;
  if (currentPassword) {
    els.loginTitle.textContent = 'Acesso Restrito';
    els.loginSub.textContent = 'Entre com a senha para continuar.';
    els.loginBtn.style.display = '';
    els.defineBtn.style.display = 'none';
  } else {
    els.loginTitle.textContent = 'Configurar Senha';
    els.loginSub.textContent = 'Defina uma senha para habilitar o acesso.';
    els.loginBtn.style.display = 'none';
    els.defineBtn.style.display = '';
  }
  els.loginScreen.style.display = 'flex';
}

function showApp() {
  els.loginScreen.style.display = 'none';
  els.app.style.display = 'flex';
  initApp();
}

async function setPassword() {
  const p = els.passInput.value.trim();
  if (!p) { els.loginErr.textContent = 'A senha não pode ser vazia.'; return; }
  await set(ref(db, PASSWORD_NODE), p);
  els.passInput.value = '';
  await loadPassword();
  els.loginErr.textContent = 'Senha definida! Entre com ela para acessar.';
}

function checkPassword() {
  const p = els.passInput.value;
  if (p && currentPassword && p === currentPassword) {
    showApp();
  } else {
    els.loginErr.textContent = 'Senha incorreta.';
    els.passInput.select();
  }
}

els.togglePass.addEventListener('click', ()=>{ els.passInput.type = els.passInput.type==='password'?'text':'password'; });
els.passInput.addEventListener('keydown', e=>{
  if(e.key==='Enter'){ currentPassword? checkPassword(): setPassword(); }
});
els.loginBtn.addEventListener('click', checkPassword);
els.defineBtn.addEventListener('click', setPassword);

loadPassword();
// -----------------------------------------------------------
// ------------------ Fim da Lógica de Senha -----------------
// -----------------------------------------------------------

// -----------------------------------------------------------
// ------------------- Código Original (Mantido) -------------
// -----------------------------------------------------------
const dataSelecionadaInput = document.getElementById('dataSelecionada');
const agendaDiv = document.getElementById('agenda');
const novoBtn = document.getElementById('novoBtn');
const hojeBtn = document.getElementById('hojeBtn');
const prevDayBtn = document.getElementById('prevDayBtn');
const nextDayBtn = document.getElementById('nextDayBtn');
const notasFixasTextarea = document.getElementById('notasFixas');
const searchInput = document.getElementById('search');
const searchResultsDiv = document.getElementById('searchResults');
const limparBuscaBtn = document.getElementById('limparBuscaBtn');
const exportarBtn = document.getElementById('exportarBtn');
const cpfInput = document.getElementById('cpf');
const cpfStatusP = document.getElementById('cpfStatus');
const cpfClearBtn = document.getElementById('cpfClear');
const cpfCopyBtn = document.getElementById('cpfCopy');
const clockSpan = document.getElementById('clock');
const autosaveStateSpan = document.getElementById('autosaveState');

let dadosAgenda = {};
let notasFixas = '';
let dataAtual = new Date();
let autosaveTimer;
let debounceTimer;

const CPF_NODE = 'cpfValidado';
const AGENDA_NODE = 'agenda';
const NOTAS_NODE = 'notasFixas';

function formatarData(data) {
  const d = data.getDate().toString().padStart(2, '0');
  const m = (data.getMonth() + 1).toString().padStart(2, '0');
  const a = data.getFullYear();
  return `${d}/${m}/${a}`;
}

function formatarDataISO(data) {
  return data.toISOString().split('T')[0];
}

function formatarDataParaFirebase(data) {
  return formatarDataISO(data);
}

function carregarData(data) {
  const dataStr = formatarDataParaFirebase(data);
  renderizarAgenda(dataStr);
  dataSelecionadaInput.value = dataStr;
}

function renderizarAgenda(dataStr) {
  agendaDiv.innerHTML = '';
  const compromissosDoDia = dadosAgenda[dataStr] || [];
  compromissosDoDia.sort((a, b) => a.hora.localeCompare(b.hora));
  if (compromissosDoDia.length === 0) {
    agendaDiv.innerHTML = '<p class="muted" style="text-align:center">Nenhum compromisso para este dia.</p>';
  } else {
    compromissosDoDia.forEach((item, index) => {
      const div = document.createElement('div');
      div.className = `commitment ${item.done ? 'done' : ''}`;
      div.innerHTML = `
        <input type="time" value="${item.hora}" data-index="${index}" class="hora-input">
        <input type="text" value="${item.texto}" data-index="${index}" class="texto-input">
        <button class="ok" data-index="${index}">${item.done ? '❌' : '✔️'}</button>
        <button class="del" data-index="${index}">🗑️</button>
      `;
      agendaDiv.appendChild(div);
    });
  }
}

function adicionarCompromisso() {
  const dataStr = formatarDataParaFirebase(dataAtual);
  if (!dadosAgenda[dataStr]) dadosAgenda[dataStr] = [];
  dadosAgenda[dataStr].push({ hora: '09:00', texto: '', done: false });
  salvarDados();
  renderizarAgenda(dataStr);
}

function atualizarCompromisso(index, campo, valor) {
  const dataStr = formatarDataParaFirebase(dataAtual);
  if (dadosAgenda[dataStr] && dadosAgenda[dataStr][index]) {
    dadosAgenda[dataStr][index][campo] = valor;
    salvarDados();
  }
}

function removerCompromisso(index) {
  const dataStr = formatarDataParaFirebase(dataAtual);
  if (dadosAgenda[dataStr] && dadosAgenda[dataStr][index]) {
    dadosAgenda[dataStr].splice(index, 1);
    salvarDados();
    renderizarAgenda(dataStr);
  }
}

function alternarConcluido(index) {
  const dataStr = formatarDataParaFirebase(dataAtual);
  if (dadosAgenda[dataStr] && dadosAgenda[dataStr][index]) {
    dadosAgenda[dataStr][index].done = !dadosAgenda[dataStr][index].done;
    salvarDados();
    renderizarAgenda(dataStr);
  }
}

async function salvarDados() {
  clearTimeout(autosaveTimer);
  autosaveStateSpan.textContent = 'salvando...';
  await set(ref(db, AGENDA_NODE), dadosAgenda);
  await set(ref(db, NOTAS_NODE), notasFixasTextarea.value);
  autosaveStateSpan.textContent = 'salvo';
  clearTimeout(autosaveTimer);
  autosaveTimer = setTimeout(() => {
    autosaveStateSpan.textContent = 'a cada 5s';
  }, 5000);
}

function formatarCPF(cpf) {
  cpf = cpf.replace(/\D/g, '');
  if (cpf.length > 11) cpf = cpf.substring(0, 11);
  if (cpf.length > 9) {
    cpf = cpf.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, '$1.$2.$3-$4');
  } else if (cpf.length > 6) {
    cpf = cpf.replace(/^(\d{3})(\d{3})(\d{3})$/, '$1.$2.$3');
  } else if (cpf.length > 3) {
    cpf = cpf.replace(/^(\d{3})(\d{3})$/, '$1.$2');
  } else if (cpf.length > 0) {
    cpf = cpf.replace(/^(\d{3})$/, '$1');
  }
  return cpf;
}

function validarCPF(cpf) {
  cpf = cpf.replace(/\D/g, '');
  if (cpf.length !== 11 || /^(\d)\1{10}$/.test(cpf)) return false;
  let sum = 0, rest;
  for (let i = 1; i <= 9; i++) sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);
  rest = (sum * 10) % 11;
  if ((rest === 10) || (rest === 11)) rest = 0;
  if (rest !== parseInt(cpf.substring(9, 10))) return false;
  sum = 0;
  for (let i = 1; i <= 10; i++) sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);
  rest = (sum * 10) % 11;
  if ((rest === 10) || (rest === 11)) rest = 0;
  if (rest !== parseInt(cpf.substring(10, 11))) return false;
  return true;
}

function buscar(termo) {
  searchResultsDiv.innerHTML = '';
  const termoNormalizado = termo.toLowerCase().trim();
  if (termoNormalizado.length < 3) return;
  let resultados = [];
  for (const data in dadosAgenda) {
    dadosAgenda[data].forEach(comp => {
      if (comp.texto.toLowerCase().includes(termoNormalizado)) {
        resultados.push({ data, ...comp });
      }
    });
  }
  if (resultados.length === 0) {
    searchResultsDiv.innerHTML = '<p class="muted" style="text-align:center">Nenhum resultado encontrado.</p>';
  } else {
    resultados.forEach(res => {
      const div = document.createElement('div');
      const dataFormatada = new Date(res.data + 'T00:00:00').toLocaleDateString('pt-BR');
      div.textContent = `${res.hora} - ${res.texto} (${dataFormatada})`;
      div.dataset.data = res.data;
      div.addEventListener('click', () => {
        const [year, month, day] = res.data.split('-').map(Number);
        dataAtual = new Date(year, month - 1, day);
        carregarData(dataAtual);
        const compromissos = Array.from(agendaDiv.querySelectorAll('.commitment'));
        compromissos.forEach(c => {
          const hora = c.querySelector('.hora-input').value;
          const texto = c.querySelector('.texto-input').value;
          if (hora === res.hora && texto === res.texto) {
            c.classList.add('destaque');
            setTimeout(() => c.classList.remove('destaque'), 2000);
          }
        });
      });
      searchResultsDiv.appendChild(div);
    });
  }
}

function exportarAgenda() {
  let texto = "Agenda de Compromissos\n\n";
  const datas = Object.keys(dadosAgenda).sort();
  datas.forEach(dataStr => {
    const data = new Date(dataStr + 'T00:00:00').toLocaleDateString('pt-BR');
    const compromissosDoDia = dadosAgenda[dataStr] || [];
    if (compromissosDoDia.length > 0) {
      texto += `--- ${data} ---\n`;
      compromissosDoDia.sort((a, b) => a.hora.localeCompare(b.hora));
      compromissosDoDia.forEach(comp => {
        const status = comp.done ? '[OK]' : '[ ]';
        texto += `${status} ${comp.hora} - ${comp.texto}\n`;
      });
      texto += '\n';
    }
  });
  texto += '\n--- Lembretes Fixos ---\n';
  texto += notasFixasTextarea.value;

  const blob = new Blob([texto], { type: 'text/plain;charset=utf-8' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'agenda_completa.txt';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function initApp() {
  // Carregar dados do Firebase (sem a lógica de senha)
  onValue(ref(db, AGENDA_NODE), (snapshot) => {
    dadosAgenda = snapshot.val() || {};
    carregarData(dataAtual);
  });
  onValue(ref(db, NOTAS_NODE), (snapshot) => {
    notasFixas = snapshot.val() || '';
    notasFixasTextarea.value = notasFixas;
  });
 
  // Listeners de eventos
  dataSelecionadaInput.addEventListener('change', (e) => {
    dataAtual = new Date(e.target.value + 'T00:00:00');
    carregarData(dataAtual);
  });
 
  hojeBtn.addEventListener('click', () => {
    dataAtual = new Date();
    carregarData(dataAtual);
  });
 
  prevDayBtn.addEventListener('click', () => {
    dataAtual.setDate(dataAtual.getDate() - 1);
    carregarData(dataAtual);
  });
 
  nextDayBtn.addEventListener('click', () => {
    dataAtual.setDate(dataAtual.getDate() + 1);
    carregarData(dataAtual);
  });
 
  novoBtn.addEventListener('click', adicionarCompromisso);
  exportarBtn.addEventListener('click', exportarAgenda);
 
  agendaDiv.addEventListener('change', (e) => {
    const target = e.target;
    const index = target.dataset.index;
    if (target.classList.contains('hora-input')) {
      atualizarCompromisso(index, 'hora', target.value);
    } else if (target.classList.contains('texto-input')) {
      atualizarCompromisso(index, 'texto', target.value);
    }
  });
 
  agendaDiv.addEventListener('click', (e) => {
    const target = e.target;
    const index = target.dataset.index;
    if (target.classList.contains('del')) {
      removerCompromisso(index);
    } else if (target.classList.contains('ok')) {
      alternarConcluido(index);
    }
  });
 
  notasFixasTextarea.addEventListener('input', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(salvarDados, 1000);
  });
 
  searchInput.addEventListener('input', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => buscar(searchInput.value), 300);
  });
 
  limparBuscaBtn.addEventListener('click', () => {
    searchInput.value = '';
    searchResultsDiv.innerHTML = '';
  });
 
  cpfInput.addEventListener('input', (e) => {
    const valorLimpo = e.target.value.replace(/\D/g, '');
    e.target.value = formatarCPF(valorLimpo);
    if (valorLimpo.length === 11) {
      if (validarCPF(valorLimpo)) {
        cpfStatusP.textContent = '✅ CPF Válido';
        cpfStatusP.style.color = '#16a34a';
      } else {
        cpfStatusP.textContent = '❌ CPF Inválido';
        cpfStatusP.style.color = '#dc2626';
      }
    } else {
      cpfStatusP.textContent = '';
    }
  });
 
  cpfClearBtn.addEventListener('click', () => {
    cpfInput.value = '';
    cpfStatusP.textContent = '';
    cpfInput.focus();
  });
 
  cpfCopyBtn.addEventListener('click', async () => {
    const valorLimpo = cpfInput.value.replace(/\D/g, '');
    if (valorLimpo) {
      try {
        await navigator.clipboard.writeText(valorLimpo);
        cpfStatusP.textContent = 'Copiado!';
        cpfStatusP.style.color = '#1e40af';
        setTimeout(() => {
          if (cpfInput.value.replace(/\D/g, '').length === 11) {
            const isValid = validarCPF(valorLimpo);
            cpfStatusP.textContent = isValid ? '✅ CPF Válido' : '❌ CPF Inválido';
            cpfStatusP.style.color = isValid ? '#16a34a' : '#dc2626';
          } else {
            cpfStatusP.textContent = '';
          }
        }, 1500);
      } catch (err) {
        console.error('Falha ao copiar:', err);
      }
    }
  });
 
  function updateClock() {
    const now = new Date();
    const h = now.getHours().toString().padStart(2, '0');
    const m = now.getMinutes().toString().padStart(2, '0');
    clockSpan.textContent = `${h}:${m}`;
  }
  setInterval(updateClock, 1000);
  updateClock();
}
</script>
</body>
</html>
